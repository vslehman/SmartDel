#!/bin/bash

#//////////////////////////////////////////////////////////////////////////////
#                                 SmartDel
#------------------------------------------------------------------------------
#                               Vince Lehman
#                                COMP 4262
#                              Course Project
#                                 12/2/14
#//////////////////////////////////////////////////////////////////////////////

TRUE="true"
FALSE="false"

IS_DEBUG_ON=$FALSE

ACTION_DELETE=0
ACTION_RESTORE=1

RECYCLE_DIR="$HOME/.recycle/"

STRING_HELP="Usage: smartdel [option] [filename]
  option –d: delete the file (not directory) specified by [filename] (default)
  option –r: restore the file specified by [filename] to the current directory"

isArgProvided=true

ERROR_NO_ARGS="1"
ERROR_NO_FILES="2"

#==============================================================================
# log()
#------------------------------------------------------------------------------
# Parameters:
#   $1: The message to log
#
# return:
#   N/A
#==============================================================================
log()
{
  msg=$1

  if [ "$IS_DEBUG_ON" = "$TRUE" ]; then
    echo "DEBUG: $msg"
  fi
}

#==============================================================================
# printHelp()
#------------------------------------------------------------------------------
# Parameters:
#   N/A
#
# return:
#   N/A
#==============================================================================
printHelp()
{
  echo "$STRING_HELP"
}

#==============================================================================
# delete()
#------------------------------------------------------------------------------
# Parameters:
#   $1: File to delete
#
# return:
#   N/A
#==============================================================================
delete()
{
  file=$1

  if [ -e "$file" ]; then
    log "Deleting $file"
    $(mv $file $RECYCLE_DIR)
  else
    echo "ERROR: Could not delete \"$file\""
    echo "No such file: \"$file\""
  fi
}

#==============================================================================
# restore()
#------------------------------------------------------------------------------
# Parameters:
#   $1: Pattern to match against in the recycling directory
#
# return:
#   N/A
#==============================================================================
restore()
{
  pattern="$1"
  files="$RECYCLE_DIR$pattern"

  for file in $files; do
    if [ -e "$file" ]; then
      log "Restoring $file"
      $(mv $file .)
    else
      echo "ERROR: Could not restore $file"
      echo "‘$file’: No such file"
    fi
  done
}

#==============================================================================
# parseArgs()
#------------------------------------------------------------------------------
# Parameters:
#   $1: The array of args passed to the program
#
# return:
#   N/A
#==============================================================================
parseArgs()
{
  arg=$1

  case "$arg" in
    -d)
      log "Delete"
      action=$ACTION_DELETE
      ;;
    -r)
      log "Restore"
      action=$ACTION_RESTORE
      ;;
    *)
      log "Default"
      action=$ACTION_DELETE
      isArgProvided=false
      # Assume all arguments are files
      ;;
  esac
}

#==============================================================================
# main
#------------------------------------------------------------------------------
# Parameters:
#   $@: Command-line arguments
#
# return:
#   N/A
#==============================================================================

argc=$#

# If no arguments provided, print help
if [ "$argc" -eq "0" ]; then
  log "No args"
  printHelp
  exit "$ERROR_NO_ARGS"
fi

# Check for action option
parseArgs $@

if [ "$isArgProvided" = "$TRUE" ]; then
  log "Arg provided"
  # Remove first argument
  shift 1
fi

# If there are no files to process, exit
if [ "$#" -eq "0" ]; then
  log "No files"
  printHelp
  exit "$ERROR_NO_FILES"
fi

# Perform action on each argument
for file in "$@";
do
  log "Processing file - $file"
  case $action in
    "$ACTION_DELETE")
      delete "$file"
      ;;
    "$ACTION_RESTORE")
      restore "$file"
      ;;
    *)
      echo "ERROR: Invalid action"
  esac
done
